To build this tool for the LXA TAC you will need to prepare the following:

Install rust and cargo
----------------------

https://www.rust-lang.org/tools/install

Install a toolchain
-------------------

```
rustup target add armv7-unknown-linux-gnueabihf
```

Install the SDK
---------------

You can find prebuild SDKs in our Jenkins.
e.g. for the kirkstone branch:
https://jenkins.stw.pengutronix.de/job/yocto-bsps/job/YOCTO.BSP-Pengutronix-Labgrid/job/kirkstone-lxatac/lastSuccessfulBuild/artifact/sdk/

To build with cargo, you can install the SDK and add something like the
following to your .cargo/config (based on :

[target.armv7-unknown-linux-gnueabihf]
linker = "/home/jluebbe/ptx/build/lxatac/build/sdk/sysroots/x86_64-oesdk-linux/usr/bin/arm-oe-linux-gnueabi/arm-oe-linux-gnueabi-gcc"
rustflags = [
"-C", "link-arg=-mthumb",
"-C", "link-arg=-mfpu=neon-vfpv4",
"-C", "link-arg=-mfloat-abi=hard",
"-C", "link-arg=-mcpu=cortex-a7",
"-C", "link-arg=--sysroot=/home/jluebbe/ptx/build/lxatac/build/sdk/sysroots/cortexa7t2hf-neon-vfpv4-oe-linux-gnueabi",
]

Remeber to point *both* paths. Also remember to source the SDK activation script before building.

Build web interface
-------------------

The web interface is bundled into the tacd binary during cargo buil,
so it needs to be built as least once before tacd can be built.

To do so:

  cd web
  npm install .
  npm run build

Build tacd
----------

Then, you can use 'cargo build --target armv7-unknown-linux-gnueabihf'.
The resulting binary is placed in 'target/armv7-unknown-linux-gnueabihf/release/tacd'
and contains averything required to run the tacd.

Unit tests
----------

While the test coverage is not great there are some unit tests.
Run them in a shell where you _did not_ source the Yocto SDK using:

  cargo test --no-default-features

Running on a PC
---------------

The tacd heavily relies on a lot of hardware and files being present on the
TAC, this means that the full tacd can not run on a non-TAC system.

You can however run a stripped-down version by using:

  cargo run --features=stub_out_everything --no-default-features

Not that this should again be run in a shell where the Yocto SDK is not sourced.
Also note that rust will complain very loudly about a lot of dead code.

Contributing
------------

- Use a somewhat recent stable rust release for testing
- Use 'cargo fmt' after every change to the rust codebase
- Use 'npx prettier --write .' (in the web directory) after every change to the
  web codebase.
